{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/SendMessageForm/SendMessageForm.module.css","components/Dialogs/SendMessageForm/SendMessageForm.jsx","components/Dialogs/SendMessageForm/SendMessageFormContainer.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","RemoveBlankLineButtonMessage","RemoveButtonWhenEmptyLine","styles","buttonSend","messageInputRedux","reduxForm","form","props","className","onSubmit","handleSubmit","Field","component","name","validate","required","InputPanelContainer","connect","state","dialogsPage","newMessageText","dispatch","Message","mainMessageWrapper","wrapperPhoto","src","photo","photoItem","alt","userName","item","message","ws","WebSocket","Dialogs","useState","setMessage","setAddMessage","useEffect","addEventListener","e","newMessage","JSON","parse","data","prevMessage","messageTEMP","map","id","userId","dialogs","messageItem","messageWrapper","messageBody","values","send","textMessage","compose","addMessage","addMessageActionCreator","WithAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,aAAe,8BAA8B,OAAS,wBAAwB,YAAc,6BAA6B,KAAO,sBAAsB,eAAiB,gCAAgC,YAAc,6BAA6B,QAAU,yBAAyB,UAAY,2BAA2B,mBAAqB,sC,oBCA/aD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,WAAa,sC,gJCKhEC,EAA+BC,YAA0BC,IAAOC,WAAY,QASnEC,EAAoBC,YAAU,CACzCC,KAAM,WADyBD,EAPd,SAACE,GAClB,OACE,sBAAMC,UAAWN,IAAOI,KAAMG,SAAUF,EAAMG,aAA9C,SACE,cAACC,EAAA,EAAD,CAAOC,UAAWZ,EAA8Ba,KAAM,cAAeC,SAAU,CAACC,Y,QCKvEC,EAFaC,aAVN,SAACC,GACrB,MAAO,CACLC,YAAaD,EAAMC,YACnBC,eAAgBF,EAAMC,YAAYC,mBAGb,SAACC,GACxB,MAAO,KAGmBJ,CAA6Cb,GCG1DkB,EAdC,SAACf,GACf,OACE,sBAAKC,UAAWN,IAAOqB,mBAAvB,UACE,sBAAKf,UAAWN,IAAOsB,aAAvB,UACE,qBAAKC,IAAKlB,EAAMmB,MAAOlB,UAAWN,IAAOyB,UAAWC,IAAI,KACxD,+BAAOrB,EAAMsB,cAEf,qBAAKrB,UAAWN,IAAO4B,KAAvB,SACE,sBAAMtB,UAAWN,IAAO6B,QAAxB,SAAkCxB,EAAMwB,gBCqB1CC,EAAK,IAAIC,UAAU,gEAwCVC,EAtCsB,SAAC,GAAoB,EAAlBf,YAAmB,IAAD,EAC1BgB,mBAA6B,IADH,mBACjDJ,EADiD,KACxCK,EADwC,OAEpBD,mBAAS,IAFW,mBAErCE,GAFqC,WAIxDC,qBAAU,WACRN,EAAGO,iBAAiB,WAAW,SAACC,GAC9B,IAAMC,EAAaC,KAAKC,MAAMH,EAAEI,MAChCR,GAAW,SAACS,GAAD,4BAAqBA,GAArB,YAAqCJ,YAEjD,IAEH,IAAMK,EAAcf,EAAQgB,KAAI,SAAChB,GAAD,OAC9B,cAAC,EAAD,CAEEF,SAAUE,EAAQF,SAClBH,MAAOK,EAAQL,MACfsB,GAAIjB,EAAQkB,OACZlB,QAASA,EAAQA,SAJZA,EAAQkB,WAajB,OACE,qBAAKzC,UAAWN,IAAOgD,QAAvB,SACE,sBAAK1C,UAAWN,IAAOiD,YAAvB,UACE,qBAAK3C,UAAWN,IAAOkD,eAAvB,SACE,qBAAK5C,UAAWN,IAAOmD,YAAvB,SAAqCP,MAEvC,cAAC,EAAD,CAAqBrC,SAXL,SAAC6C,GACrBtB,EAAGuB,KAAKD,EAAOE,aACfnB,EAAc,a,yBCpCHoB,sBACbxC,aAfoB,SAACC,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACE,GACxB,MAAO,CACLqC,WAAY,SAACF,GACXnC,EAASsC,YAAwBH,SAOrCI,IAFaH,CAGbvB","file":"static/js/3.fb05cbe9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2pSFg\",\"dialogItem\":\"Dialogs_dialogItem__1vw3e\",\"senderDialog\":\"Dialogs_senderDialog__1EV5Z\",\"active\":\"Dialogs_active__1YbVO\",\"messageItem\":\"Dialogs_messageItem__1Izmh\",\"item\":\"Dialogs_item__26I8G\",\"messageWrapper\":\"Dialogs_messageWrapper__3Dems\",\"messageBody\":\"Dialogs_messageBody__2N5er\",\"message\":\"Dialogs_message__3RK_h\",\"photoItem\":\"Dialogs_photoItem__Zbcjd\",\"mainMessageWrapper\":\"Dialogs_mainMessageWrapper__2nO-z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SendMessageForm_form__b6kH0\",\"buttonSend\":\"SendMessageForm_buttonSend__lK0TB\"};","import React from \"react\";\r\nimport styles from \"./SendMessageForm.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { RemoveButtonWhenEmptyLine } from \"../../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../../utils/validators\";\r\n\r\nlet RemoveBlankLineButtonMessage = RemoveButtonWhenEmptyLine(styles.buttonSend, \"Send\");\r\n\r\nlet messageInput = (props) => {\r\n  return (\r\n    <form className={styles.form} onSubmit={props.handleSubmit}>\r\n      <Field component={RemoveBlankLineButtonMessage} name={\"textMessage\"} validate={[required]} />\r\n    </form>\r\n  );\r\n};\r\nexport const messageInputRedux = reduxForm({\r\n  form: \"message\",\r\n})(messageInput);\r\n","import React from \"react\";\r\nimport { messageInputRedux } from \"./SendMessageForm\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    newMessageText: state.dialogsPage.newMessageText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nconst InputPanelContainer = connect(mapStateToProps, mapDispatchToProps)(messageInputRedux);\r\n\r\nexport default InputPanelContainer;\r\n","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={styles.mainMessageWrapper}>\r\n      <div className={styles.wrapperPhoto}>\r\n        <img src={props.photo} className={styles.photoItem} alt=\"\" />\r\n        <span>{props.userName}</span>\r\n      </div>\r\n      <div className={styles.item}>\r\n        <span className={styles.message}>{props.message}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport InputPanelContainer from \"./SendMessageForm/SendMessageFormContainer\";\r\nimport Message from \"./Message/Message\";\r\n\r\ntype dialogsDataType = {\r\n  id: number;\r\n  name: string;\r\n};\r\ntype messagesDataType = {\r\n  id: number;\r\n  message: string;\r\n};\r\ntype dialogsPageType = {\r\n  dialogsData: Array<dialogsDataType>;\r\n  messagesData: Array<messagesDataType>;\r\n};\r\ntype MapStateType = {\r\n  dialogsPage: dialogsPageType;\r\n};\r\ntype MapDispatchType = {\r\n  addMessage: (values: string) => void;\r\n};\r\ntype PropsType = MapStateType & MapDispatchType;\r\n\r\ntype messageType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};\r\n\r\nconst ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\");\r\n\r\nconst Dialogs: React.FC<PropsType> = ({ dialogsPage }) => {\r\n  const [message, setMessage] = useState<Array<messageType>>([]);\r\n  const [addMessage, setAddMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    ws.addEventListener(\"message\", (e) => {\r\n      const newMessage = JSON.parse(e.data);\r\n      setMessage((prevMessage) => [...prevMessage, ...newMessage]);\r\n    });\r\n  }, []);\r\n\r\n  const messageTEMP = message.map((message) => (\r\n    <Message\r\n      key={message.userId}\r\n      userName={message.userName}\r\n      photo={message.photo}\r\n      id={message.userId}\r\n      message={message.message}\r\n    />\r\n  ));\r\n\r\n  const addNewMessage = (values: any) => {\r\n    ws.send(values.textMessage);\r\n    setAddMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.messageItem}>\r\n        <div className={styles.messageWrapper}>\r\n          <div className={styles.messageBody}>{messageTEMP}</div>\r\n        </div>\r\n        <InputPanelContainer onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { addMessageActionCreator } from \"../../redux/dialogsReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (textMessage) => {\r\n      dispatch(addMessageActionCreator(textMessage));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  WithAuthRedirect,\r\n)(Dialogs);\r\n// connect собирает компоненту, и возвращает её с props котрые берёт с функций mstp, mdtp (это то что мы передём в compose вторым вызовом)\r\n"],"sourceRoot":""}