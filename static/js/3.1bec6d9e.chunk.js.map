{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/BasicUserInfo/BasicUserInfo.module.css","img/icon/edit.png","components/Profile/MyPosts/MyPostForm.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileStatus.jsx","components/Profile/BasicUserInfo/BasicUserInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","maxLength_50","maxLength","minLength_3","minLength","Textarea","Element","MyPostFormHOC","reduxForm","form","props","className","styles","myPostForm","onSubmit","handleSubmit","Field","component","name","validate","Post","posts__item","posts__image","postWrapper","postSender","posts__post","post","likes","likesCount","likesCountNumeral","MyPosts","React","memo","postItem","posts","reverse","map","id","postsWrapper","title","isOwner","profile","fullName","postsTextarea","wrapperTextarea","values","addPostActionCreator","newPostMessage","connect","state","profilePage","newPostText","compose","userId","auth","isAuth","authUserProfile","withRouter","useState","status","setStatus","editMode","setEditMode","useEffect","wrapperBodyStatus","wrapperTextStatus","onClick","textStatus","src","edit","alt","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","BasicUserInfo","style","userInfo","userName","Profile","Preloader","match","params","to","topSectionProfile","wrapperMainAvatar","mainAvatar","photos","large","photoLarge","buttonEditMainAvatar","type","target","files","length","setUserAvatar","file","for","ProfileContainer","this","authUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","setUserAvatarTC","Component","fake"],"mappings":"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","file":"static/js/3.1bec6d9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMainAvatar\":\"Profile_wrapperMainAvatar__2b8ua\",\"topSectionProfile\":\"Profile_topSectionProfile__19sRo\",\"mainAvatar\":\"Profile_mainAvatar__25PbP\",\"file\":\"Profile_file__3h_Ah\",\"buttonEditMainAvatar\":\"Profile_buttonEditMainAvatar__12hSc\",\"wrapperBodyStatus\":\"Profile_wrapperBodyStatus__2e2D4\",\"textStatus\":\"Profile_textStatus__1xOS-\",\"wrapperTextStatus\":\"Profile_wrapperTextStatus__21JtH\",\"addStatus\":\"Profile_addStatus__rDBlk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperTextarea\":\"MyPosts_wrapperTextarea__T1NCH\",\"myPostForm\":\"MyPosts_myPostForm__3YMBI\",\"postsTextarea\":\"MyPosts_postsTextarea__VyBsg\",\"title\":\"MyPosts_title__3Ye2x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts__item\":\"Post_posts__item__3d1SX\",\"posts__image\":\"Post_posts__image__2fjvP\",\"postWrapper\":\"Post_postWrapper__2b5-e\",\"postSender\":\"Post_postSender__1qefa\",\"posts__post\":\"Post_posts__post__11AZl\",\"likesCount\":\"Post_likesCount__2yveC\",\"likesCountNumeral\":\"Post_likesCountNumeral__38Nhz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userInfo\":\"BasicUserInfo_userInfo__2OMpG\",\"userName\":\"BasicUserInfo_userName__3pVHt\"};","export default __webpack_public_path__ + \"static/media/edit.1f85f626.png\";","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLength, minLength } from \"../../../utils/validators\";\r\nimport { Element } from \"../../common/FormsControls/FormsControls\";\r\nimport styles from \"./MyPosts.module.css\";\r\n\r\nconst maxLength_50 = maxLength(50);\r\nconst minLength_3 = minLength(3);\r\n\r\nconst Textarea = Element(\"textarea\");\r\n\r\nconst MyPostsForm = (props) => {\r\n  return (\r\n    <form className={styles.myPostForm} onSubmit={props.handleSubmit}>\r\n      <Field component={Textarea} name=\"newPostMessage\" validate={[maxLength_50, minLength_3]} />\r\n      <button>Send</button> \r\n    </form>\r\n  );\r\n};\r\n\r\nexport const MyPostFormHOC = reduxForm({ form: \"newPostMessage\" })(MyPostsForm);\r\n","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={styles.posts__item}>\r\n      <div className={styles.posts__image}></div>\r\n      <div className={styles.postWrapper}>\r\n        <div className={styles.postSender}>{props.name}</div>\r\n        <div className={styles.posts__post}>{props.post}</div>\r\n      </div>\r\n      <div className={styles.likes}>\r\n        <span className={styles.likesCount}>\r\n          LIKE <span className={styles.likesCountNumeral}>{props.likesCount}</span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { MyPostFormHOC } from \"./MyPostForm\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { addPostActionCreator } from \"../../../redux/profileReducer\";\r\n\r\n// React.memo оптимизирует компонент за счёт того что не вызывает метод render() если props НЕ изменились\r\n// Если изменился useState, то компонент повторно отрендерится\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  // делаем копию, и изменяем её. Т.к reverse - мутирущий метод массива\r\n  let postItem = [...props.posts]\r\n    .reverse()\r\n    .map((posts) => (\r\n      <Post\r\n        name=\"Name Surname\"\r\n        key={posts.id}\r\n        id={posts.id}\r\n        post={posts.post}\r\n        likesCount={posts.likesCount}\r\n      />\r\n    ));\r\n\r\n  let newPostMessage = (values) => {\r\n    props.addPostActionCreator(values.newPostMessage);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.postsWrapper}>\r\n      <h2 className={styles.title}>\r\n        {props.isOwner ? (\r\n          `My posts`\r\n        ) : (\r\n          <div>\r\n            Publication <span>{props.profile.fullName}</span>\r\n          </div>\r\n        )}\r\n      </h2>\r\n      <div className={styles.postsTextarea}>\r\n        <div className={styles.wrapperTextarea}>\r\n          <MyPostFormHOC onSubmit={newPostMessage} />\r\n        </div>\r\n      </div>\r\n      {postItem}\r\n    </div>\r\n  );\r\n});\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n    profile: state.profilePage.profile,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addPostActionCreator })(MyPosts);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport edit from \"../../img/icon/edit.png\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst ProfileStatus = (props) => {\r\n  const [status, setStatus] = useState(props.status);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Когда компонент отрисуется, выполнится код...\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const offEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div className={styles.wrapperBodyStatus}>\r\n      <div>\r\n        {!editMode && (\r\n          <div className={styles.wrapperTextStatus}>\r\n            <span\r\n              onClick={props.isAuth && props.isOwner && onEditMode}\r\n              className={styles.textStatus}\r\n            >\r\n              {props.status || \"\"}\r\n              {props.isAuth && props.isOwner && <img src={edit} alt=\"\" />}\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {editMode && (\r\n        <div>\r\n          <input autoFocus onBlur={offEditMode} onChange={onStatusChange} value={status} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    authUserProfile: state.auth.authUserProfile,\r\n  };\r\n};\r\nexport default compose(connect(mapStateToProps, {}), withRouter)(ProfileStatus);\r\n","import React from \"react\";\r\nimport style from \"./BasicUserInfo.module.css\";\r\nimport ProfileStatus from \"../ProfileStatus\";\r\n\r\nconst BasicUserInfo = (props) => {\r\n  return (\r\n    <div className={style.userInfo}>\r\n      <h1 className={style.userName}>{props.profile.fullName}</h1>\r\n      <ProfileStatus\r\n        isOwner={props.isOwner}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasicUserInfo;\r\n","import React from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport photoLarge from \"../../img/photo.jpg\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// import ProfileStatus from \"./ProfileStatus\";\r\nimport edit from \"../../img/icon/edit.png\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport BasicUserInfo from \"./BasicUserInfo/BasicUserInfo\";\r\n\r\nconst Profile = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  if (!props.isAuth && !props.match.params) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.setUserAvatar(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <section className={styles.profile}>\r\n      <div className={styles.topSectionProfile}>\r\n        <div className={styles.wrapperMainAvatar}>\r\n          <img\r\n            className={styles.mainAvatar}\r\n            // src={props.profile.photos.large != null ? props.profile.photos.large : photoLarge}\r\n            src={props.profile.photos.large || photoLarge}\r\n            alt=\"\"\r\n          />\r\n          {props.isAuth && props.isOwner && (\r\n            <div className={styles.buttonEditMainAvatar}>\r\n              <input type=\"file\" id=\"file\" onChange={onMainPhotoSelected} className={styles.file} />\r\n              <label for=\"file\">\r\n                <img src={edit} alt=\"\" />\r\n              </label>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <BasicUserInfo\r\n          isOwner={props.isOwner}\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n          profile={props.profile}\r\n        />\r\n      </div>\r\n      <MyPosts isOwner={props.isOwner} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  updateStatus,\r\n  setUserAvatarTC,\r\n} from \"../../redux/profileReducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\n// import { WithAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/users\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        setUserAvatar={this.props.setUserAvatarTC}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    fake: state.profilePage.fake,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getUserStatus, updateStatus, setUserAvatarTC }),\r\n  withRouter\r\n  // WithAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}