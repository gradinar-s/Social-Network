{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/MessageAddress/MessageAddress.module.css","components/Dialogs/SendMessageForm/SendMessageForm.module.css","components/Dialogs/Message/MessageAddress/MessageAddress.jsx","components/Dialogs/SendMessageForm/SendMessageForm.jsx","components/Dialogs/SendMessageForm/SendMessageFormContainer.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","MessageAddress","props","className","styles","item","avatar","src","alt","info","name","status","RemoveBlankLineButtonMessage","RemoveButtonWhenEmptyLine","buttonSend","messageInputRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","required","InputPanelContainer","connect","state","dialogsPage","newMessageText","dispatch","DialogItem","path","id","to","senderDialog","Message","message","Dialogs","dialogs","dialogsData","map","dialog","messages","messagesData","dialogItem","messageItem","messageWrapper","messageBody","values","console","log","textMessage","addMessage","mapStateToPropsForRedirect","isAuth","auth","compose","addMessageActionCreator","Component"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,aAAe,8BAA8B,OAAS,wBAAwB,YAAc,6BAA6B,KAAO,sBAAsB,eAAiB,gCAAgC,YAAc,6BAA6B,QAAU,2B,oBCA1VD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,OAAS,+BAA+B,KAAO,6BAA6B,KAAO,6BAA6B,OAAS,iC,oBCA/KD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,WAAa,sC,4FCiBrDC,EAfQ,SAACC,GACtB,OACE,sBAAKC,UAAWC,IAAOC,KAAvB,UACE,qBAAKF,UAAWC,IAAOE,OAAvB,SACE,qBAAKC,IAAKL,EAAMI,OAAQE,IAAI,OAE9B,sBAAKL,UAAWC,IAAOK,KAAvB,UACE,qBAAKN,UAAWC,IAAOM,KAAvB,0BACA,qBAAKP,UAAWC,IAAOO,OAAvB,mC,oDCLJC,EAA+BC,YAA0BT,IAAOU,WAAY,QASnEC,EAAoBC,YAAU,CACzCC,KAAM,WADyBD,EAPd,SAACd,GAClB,OACE,sBAAMC,UAAWC,IAAOa,KAAMC,SAAUhB,EAAMiB,aAA9C,SACE,cAACC,EAAA,EAAD,CAAOC,UAAWT,EAA8BF,KAAM,cAAeY,SAAU,CAACC,Y,QCKvEC,EAFaC,aAVN,SAACC,GACrB,MAAO,CACLC,YAAaD,EAAMC,YACnBC,eAAgBF,EAAMC,YAAYC,mBAGb,SAACC,GACxB,MAAO,KAGmBJ,CAA6CV,G,QCA1De,EAVI,SAAC5B,GAClB,IAAI6B,EAAO,YAAc7B,EAAM8B,GAE/B,OACE,cAAC,IAAD,CAASC,GAAIF,EAAM5B,UAAWC,IAAO8B,aAArC,SACGhC,EAAMQ,QCEEyB,EARC,SAACjC,GACf,OACI,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,sBAAMF,UAAWC,IAAOgC,QAAxB,SAAkClC,EAAMkC,aC4BjCC,EA3BC,SAACnC,GACf,IAAIwB,EAAQxB,EAAMyB,YAEdW,EAAUZ,EAAMa,YAAYC,KAAI,SAACC,GAAD,OAClC,cAAC,EAAD,CAA4BT,GAAIS,EAAOT,GAAItB,KAAM+B,EAAO/B,MAAvC+B,EAAOT,OAEtBU,EAAWhB,EAAMiB,aAAaH,KAAI,SAACJ,GAAD,OACpC,cAAC,EAAD,CAA0BJ,GAAII,EAAQJ,GAAII,QAASA,EAAQA,SAA7CA,EAAQJ,OAMxB,OACE,sBAAK7B,UAAWC,IAAOkC,QAAvB,UACE,qBAAKnC,UAAWC,IAAOwC,WAAvB,SAAoCN,IACpC,sBAAKnC,UAAWC,IAAOyC,YAAvB,UACE,cAAC,EAAD,IACA,qBAAK1C,UAAWC,IAAO0C,eAAvB,SACE,qBAAK3C,UAAWC,IAAO2C,YAAvB,SAAqCL,MAEvC,cAAC,EAAD,CAAqBxB,SAZP,SAAC8B,GACnBC,QAAQC,IAAIF,EAAOG,aACnBjD,EAAMkD,WAAWJ,EAAOG,uB,eCdtBE,EAA6B,SAAC3B,GAClC,MAAO,CACL4B,OAAQ5B,EAAM6B,KAAKD,S,gBCeRE,sBACb/B,aAfoB,SAACC,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACE,GACxB,MAAO,CACLuB,WAAY,SAACD,GACXtB,EAAS4B,YAAwBN,UDNP,SAACO,GAM/B,OADmCjC,YAAQ4B,EAAR5B,EAJX,SAACvB,GACvB,OAAKA,EAAMoD,OACJ,cAACI,EAAD,eAAexD,IADI,cAAC,IAAD,CAAU+B,GAAG,gBCS5BuB,CAGbnB","file":"static/js/3.6658f985.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2pSFg\",\"dialogItem\":\"Dialogs_dialogItem__1vw3e\",\"senderDialog\":\"Dialogs_senderDialog__1EV5Z\",\"active\":\"Dialogs_active__1YbVO\",\"messageItem\":\"Dialogs_messageItem__1Izmh\",\"item\":\"Dialogs_item__26I8G\",\"messageWrapper\":\"Dialogs_messageWrapper__3Dems\",\"messageBody\":\"Dialogs_messageBody__2N5er\",\"message\":\"Dialogs_message__3RK_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MessageAddress_item__1geFh\",\"avatar\":\"MessageAddress_avatar__3Jevx\",\"info\":\"MessageAddress_info__3QOnt\",\"name\":\"MessageAddress_name__hZmfh\",\"status\":\"MessageAddress_status__9CcW7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SendMessageForm_form__b6kH0\",\"buttonSend\":\"SendMessageForm_buttonSend__lK0TB\"};","import React from \"react\";\r\nimport styles from \"./MessageAddress.module.css\";\r\n\r\nconst MessageAddress = (props) => {\r\n  return (\r\n    <div className={styles.item}>\r\n      <div className={styles.avatar}>\r\n        <img src={props.avatar} alt=\"\" />\r\n      </div>\r\n      <div className={styles.info}>\r\n        <div className={styles.name}>Name Surname</div>\r\n        <div className={styles.status}>Online/Offline</div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageAddress;\r\n\r\n","import React from \"react\";\r\nimport styles from \"./SendMessageForm.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { RemoveButtonWhenEmptyLine } from \"../../common/FormsControls/FormsControls\";\r\nimport { required } from \"../../../utils/validators\";\r\n\r\nlet RemoveBlankLineButtonMessage = RemoveButtonWhenEmptyLine(styles.buttonSend, \"Send\");\r\n\r\nlet messageInput = (props) => {\r\n  return (\r\n    <form className={styles.form} onSubmit={props.handleSubmit}>\r\n      <Field component={RemoveBlankLineButtonMessage} name={\"textMessage\"} validate={[required]} />\r\n    </form>\r\n  );\r\n};\r\nexport const messageInputRedux = reduxForm({\r\n  form: \"message\",\r\n})(messageInput);\r\n","import React from \"react\";\r\nimport { messageInputRedux } from \"./SendMessageForm\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    newMessageText: state.dialogsPage.newMessageText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nconst InputPanelContainer = connect(mapStateToProps, mapDispatchToProps)(messageInputRedux);\r\n\r\nexport default InputPanelContainer;\r\n","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n\r\n  return (\r\n    <NavLink to={path} className={styles.senderDialog}>\r\n      {props.name}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n      <div className={styles.item}>\r\n        <span className={styles.message}>{props.message}</span>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport MessageAddress from \"./Message/MessageAddress/MessageAddress\";\r\nimport InputPanelContainer from \"./SendMessageForm/SendMessageFormContainer\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogs = state.dialogsData.map((dialog) => (\r\n    <DialogItem key={dialog.id} id={dialog.id} name={dialog.name} />\r\n  ));\r\n  let messages = state.messagesData.map((message) => (\r\n    <Message key={message.id} id={message.id} message={message.message} />\r\n  ));\r\n  let addNewMessage = (values) => {\r\n    console.log(values.textMessage);\r\n    props.addMessage(values.textMessage);\r\n  };\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogItem}>{dialogs}</div>\r\n      <div className={styles.messageItem}>\r\n        <MessageAddress />\r\n        <div className={styles.messageWrapper}>\r\n          <div className={styles.messageBody}>{messages}</div>\r\n        </div>\r\n        <InputPanelContainer onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n  let RedirectComponent = (props) => {\r\n    if (!props.isAuth) return <Redirect to=\"/login\" />;\r\n    return <Component {...props} />;\r\n  };\r\n  let ConnectAuthRedicertComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n  return ConnectAuthRedicertComponent;\r\n};\r\n","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { addMessageActionCreator } from \"../../redux/dialogsReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (textMessage) => {\r\n      dispatch(addMessageActionCreator(textMessage));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  WithAuthRedirect,\r\n)(Dialogs);\r\n// connect собирает компоненту, и возвращает её с props котрые берёт с функций mstp, mdtp (это то что мы передём в compose вторым вызовом)\r\n"],"sourceRoot":""}